import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import time


# Função de cache para armazenar o arquivo
@st.cache_data
def load_data(file):
    return pd.read_csv(file)


# Configurando a cor de fundo e a cor da fonte
def set_colors(bg_color, font_color):
    st.markdown(
        f"""
        <style>
        .main {{
            background-color: {bg_color};
            color: {font_color};
        }}
        </style>
        """,
        unsafe_allow_html=True
    )


# Interface inicial
st.title("Bem-vindo ao Dashboard de Turismo!")
st.write("Aqui você pode explorar dados sobre turismo do Data.Rio. Vamos começar carregando seu arquivo!")

# Upload do arquivo
uploaded_file = st.file_uploader("Escolha um arquivo CSV de turismo", type="csv")

# Personalização de cores
bg_color = st.color_picker("Escolha a cor de fundo da página:", "#ffffff")
font_color = st.color_picker("Escolha a cor da fonte:", "#000000")
set_colors(bg_color, font_color)

if uploaded_file is not None:
    with st.spinner('Carregando seus dados...'):
        progress = st.progress(0)
        for i in range(100):
            time.sleep(0.01)
            progress.progress(i + 1)

        df = load_data(uploaded_file)

        st.write("### Selecione as colunas que você deseja visualizar:")
        columns = st.multiselect("Colunas disponíveis", df.columns.tolist())

        st.write("### Filtros de dados")
        filter_option = st.radio("Gostaria de filtrar por uma coluna específica?", ["Não", "Sim"])

        if filter_option == "Sim":
            filter_column = st.selectbox("Escolha uma coluna para filtrar", df.columns.tolist())
            unique_values = df[filter_column].unique()
            selected_values = st.multiselect(f"Selecione valores da coluna '{filter_column}'", unique_values)
            filtered_data = df[df[filter_column].isin(selected_values)]
        else:
            filtered_data = df

        st.write("### Dados:")
        if columns:
            st.dataframe(filtered_data[columns])
        else:
            st.dataframe(filtered_data)

        # Download dos dados filtrados
        st.write("### Faça o download dos dados filtrados:")
        csv_data = filtered_data.to_csv(index=False).encode('utf-8')
        st.download_button(label="Baixar CSV", data=csv_data, file_name='dados_filtrados.csv', mime='text/csv')

        # Visualização de gráficos
        st.write("### Visualizações Gráficas")
        chart_type = st.selectbox("Escolha o tipo de gráfico", ["Linha", "Barras", "Pizza"])

        if chart_type == "Linha":
            st.line_chart(filtered_data[columns])
        elif chart_type == "Barras":
            st.bar_chart(filtered_data[columns])
        elif chart_type == "Pizza":
            if len(columns) == 1:
                plt.pie(filtered_data[columns[0]].value_counts(), labels=filtered_data[columns[0]].unique(),
                        autopct='%1.1f%%')
                st.pyplot(plt)

        # Gráficos avançados
        st.write("### Gráficos Avançados (Scatter Plot)")
        if len(columns) > 1:
            st.scatter_chart(filtered_data[columns])

        # Métricas básicas
        st.write("### Resumo dos dados")
        st.metric("Total de registros", len(filtered_data))
        st.metric("Média dos valores selecionados", filtered_data[columns].mean().mean())
